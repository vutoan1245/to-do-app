AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: A simple backend with a rest API, Lambda, dynamoDB, and Cognito

# Build and deploy
# aws cloudformation package --template-file template.yaml --s3-bucket <s3-bucket-name> --output-template-file <file-name>
# aws cloudformation deploy --template-file <file-name> --stack-name smart-registration-test --capabilities CAPABILITY_IAM

Globals:
  Api:
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'*'"
      AllowOrigin: "'*'"

Parameters:
  DynamoDBTableName:
    Type: String
    Default: smart-database
    Description: Name for DynamoDB table
  Email:
    Type: String
    Default: vutoan1245@gmail.com
    Description: Username for front-end

Resources:
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: SmartRegistrationUsers
      AutoVerifiedAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: True

  CognitoUserPoolClient:    
    Type: AWS::Cognito::UserPoolClient
    Properties:
        ClientName: SmartRegistration
        GenerateSecret: false
        UserPoolId: !Ref CognitoUserPool
        WriteAttributes:
          - "email"

  CognitoIdPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: SmartUsersId
      CognitoIdentityProviders: 
        -
          ClientId: !Ref CognitoUserPoolClient
          ProviderName: !GetAtt CognitoUserPool.ProviderName
      AllowUnauthenticatedIdentities: false
  
  CognitoUser:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      UserPoolId: !Ref CognitoUserPool
      Username: !Ref Email
      UserAttributes:
        - Name: email
          Value: !Ref Email
      
  SmartLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.handler
      Runtime: nodejs8.10
      CodeUri: smart-lambda/
      Description: A simple backend with a RESTful API endpoint using Amazon API Gateway.
      MemorySize: 512
      Timeout: 10
      Policies:
      - Statement:
        - Action:
          - dynamodb:DeleteItem
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          Effect: Allow
          Resource:
            Fn::Join:
            - ''
            - - 'arn:aws:dynamodb:'
              - Ref: AWS::Region
              - ':'
              - Ref: AWS::AccountId
              - :table/
              - !Ref DynamoDBTableName
        Version: '2012-10-17'
      - Statement:
        - Action: "ec2:*"
          Resource: "*"
          Effect: Allow
        Version: '2012-10-17'
      - Statement:
        - Action: 
            - cloudformation:CreateStack
            - cloudformation:UpdateStack
          Resource: "*"
          Effect: Allow
        Version: '2012-10-17'
      - Statement:
        - Action: "s3:GetObject"
          Resource: "arn:aws:s3:::smart-registration-template/*"
          Effect: Allow
        Version: '2012-10-17'
      - Statement:
        - Action: "sns:Publish"
          Resource: "*"
          Effect: Allow
        Version: '2012-10-17'
      Environment: 
        Variables: 
          TABLE_NAME: !Ref Table
          TopicARN: !Ref SNSTopic
      Events:
        SmartAPI:
          Type: Api
          Properties:
            Path: /
            Method: POST
            RestApiId: !Ref SmartAPI
            
  SmartAPI:
    Type: AWS::Serverless::Api
    Properties:
        StageName: dev
        DefinitionBody:
          swagger: "2.0"
          info:
            version: "2017-08-17T22:53:59Z"
            title: "SmartAPI"
          basePath: "/prod"
          schemes:
          - "https"
          paths:
            /:
              post:
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                security:
                - SmartAPI: []
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  uri: 
                    Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SmartLambda.Arn}/invocations
                  passthroughBehavior: "when_no_match"
                  httpMethod: "POST"
                  contentHandling: "CONVERT_TO_TEXT"
                  type: "aws_proxy"
          securityDefinitions:
            SmartAPI:
              type: "apiKey"
              name: "Authorization"
              in: "header"
              x-amazon-apigateway-authtype: "cognito_user_pools"
              x-amazon-apigateway-authorizer:
                providerARNs:
                - Fn::Sub: ${CognitoUserPool.Arn}
                type: "cognito_user_pools"
          definitions:
            Empty:
              type: "object"
              title: "Empty Schema"

  Table:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref DynamoDBTableName
      AttributeDefinitions:
        -
          AttributeName: Email
          AttributeType: S
      KeySchema:
        -
          AttributeName: Email
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: smart-registration-sns
      Subscription:
        - 
          Endpoint: !Ref Email
          Protocol: email
      TopicName: smart-registration-topic


Outputs:
  ApiUrl:
    Description: URL of your API endpoint
    Value: !Join
      - ''
      - - https://
        - !Ref SmartAPI
        - '.execute-api.'
        - !Ref 'AWS::Region'
        - '.amazonaws.com/dev'
  UserPoolId:
    Description: Cognito User Pool
    Value: !Ref CognitoUserPool
  ClientId:
    Description: Cognito User Pool ClientId
    Value: !Ref CognitoUserPoolClient